namespace: tutorial-phaser

redis:
  defines: runnable
  inherits: redis/redis
  metadata:
    name: redis
    description: Redis service for handling presence and state synchronization.
    icon: >-
      https://cdn.icon-icons.com/icons2/2415/PNG/512/redis_original_wordmark_logo_icon_146369.png
  variables:
    redis_disable_commands:
      type: string
      value: FLUSHDB,FLUSHALL,CONFIG
      description: ''
    redis_empty_password:
      type: string
      value: 'yes'
      description: ''
    redis_instance_name:
      type: string
      value: master
      description: ''
    redis_io_thread:
      type: string
      value: '1'
      description: ''
    redis_io_threads_do_reads:
      type: string
      value: 'yes'
      description: ''
    redis_port:
      type: int
      value: 6379
      description: ''

client:
  defines: runnable
  metadata:
    name: client
    description: Phaser game client for the multiplayer game.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    client:
      image: env-2762.registry.local/client:master-8084c30
      build: .
      dockerfile: Dockerfile.client
  services:
    client-websocket-port:
      description: Port for serving the Phaser game client
      container: client
      port: 1234
      host-port: 1234
      publish: true
      protocol: tcp
  connections:
    websocket-server-connection:
      target: tutorial-phaser/server
      service: server-port
      optional: true
      description: WebSocket connection to the server service for real-time game events
    http-server-connection:
      target: tutorial-phaser/server
      service: server-port
      optional: true
      description: HTTP connection to the server service for game-related API requests
  variables: {}

server:
  defines: runnable
  metadata:
    name: server
    description: Colyseus server for handling multiplayer game logic.
    icon: https://emojiapi.dev/api/v1/robot.svg
  containers:
    server:
      image: env-2762.registry.local/server:master-8084c30
      build: .
      dockerfile: Dockerfile.server
  services:
    server-port:
      description: Port exposed by the server service for handling multiplayer game logic.
      container: server
      port: 2567
      host-port: 2567
      publish: true
      protocol: tcp
  connections: {}
  variables: {}

stack:
  defines: group
  members:
    - tutorial-phaser/redis
    - tutorial-phaser/client
    - tutorial-phaser/server
